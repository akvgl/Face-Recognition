======================Face recognition project with python (linux-ubuntu)================================

Step 1: Install System Dependencies
---------------------------------------------------------------------------------------------------------
sudo apt update
sudo apt install -y build-essential cmake git unzip pkg-config
sudo apt install -y libx11-dev libatlas-base-dev libgtk-3-dev libboost-python-dev
sudo apt install -y python3-dev python3-pip
---------------------------------------------------------------------------------------------------------


Step 2: Install Python and pip 
---------------------------------------------------------------------------------------------------------
sudo apt install python3-pip
---------------------------------------------------------------------------------------------------------

Step 3: Install Required Python Packages
---------------------------------------------------------------------------------------------------------
pip3 install numpy opencv-python face_recognition

==>If you encounter issues with dlib, you may also need:

sudo apt install libdlib-dev
pip3 install face_recognition
---------------------------------------------------------------------------------------------------------

Step 4: Prepare the Project Folder Structure
---------------------------------------------------------------------------------------------------------
Each subfolder inside dataset/ should be named after the person and contain one clear image.
---------------------------------------------------------------------------------------------------------


Step 5: Dynamic Face Loading Python Code
---------------------------------------------------------------------------------------------------------
code the program in script.py
---------------------------------------------------------------------------------------------------------


Step 6: Run the Script
---------------------------------------------------------------------------------------------------------
run .py file in terminal expect the output to show a webcam window and green rectangle and 
above a lable with the name of the person or "unknown".
---------------------------------------------------------------------------------------------------------




=======================================ERRORS FACED======================================================


1. face_encodings call error without face_locations
---------------------------------------------------------------------------------------------------------
TypeError: compute_face_descriptor(): incompatible function arguments. ==> error msg

cause:
Called face_recognition.face_encodings(rgb_frame) without passing detected face locations. 
The function need face locations to compute encodings correctly, otherwise it gets confused.
---------------------------------------------------------------------------------------------------------


2.  Detected 0 face(s) continuously
---------------------------------------------------------------------------------------------------------
Cause:
The face detection model(hog) wasn’t detecting any faces.
This could be caused by poor lighting, camera angle, or wrong input frame format.
---------------------------------------------------------------------------------------------------------


3.  Qt platform plugin "wayland" error on OpenCV GUI
---------------------------------------------------------------------------------------------------------
qt.qpa.plugin: Could not find the Qt platform plugin "wayland" in "path" ==> error msg
Cause:
OpenCV’s GUI tries to use the Qt backend but cannot find the Wayland plugin on your Linux system.
---------------------------------------------------------------------------------------------------------


4. Manually declaring each person's encoding
---------------------------------------------------------------------------------------------------------
Problem:
Manually loading each known person's image and encoding one by one.

Fixed it:
Wrote code to dynamically load all images from folders in the dataset directory, 
automatically encoding and labeling them based on folder names (folder name important).
---------------------------------------------------------------------------------------------------------


5. Stopping the program cleanly
---------------------------------------------------------------------------------------------------------

Initially,'q' keypress was used to exit.
Added the ability to also stop the program by pressing Esc key.

   if cv2.waitKey(1) == 27: #esc to end
     break
---------------------------------------------------------------------------------------------------------



